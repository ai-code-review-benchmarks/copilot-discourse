c
ids
batch
vector
batch
batch.lenght
next
topics.pluck(:id)
next
topics.to_sql
topics.pluck(:id)
c
vector_def.id
c
vector_def.id
c
topics.pluck(:id)
next
vector_def.id
next
topics.pluck(:id)
topics
n
c
vector_def
c
vector_def
c
backfill_vector
topic_work_list.each do |a, b| puts "\n\n#{a.class}  ---- \n\n  #{b.id} \n\n ENDENDEND" end
topic_work_list.each do |a, b| puts "\n\n#{a.id}  ---- \n\n  #{b.class} \n\n ENDENDEND" end
topic_work_list.each do |a, b| puts "\n\n#{a.class}  ---- \n\n  #{b.class} \n\n ENDENDEND" end
topic_work_list.each do |a, b| puts "\n\n#{a.class}  ---- \n\n  #{b.class}" end
topic_work_list.each do |a, b| puts "#{a.class}  ----  #{b.class}" end
topic_work_list.each do |a, b| puts a.class; puts b.class; end
topic_work_list.each {|a, b| puts a.class; puts b.class; }
topic_work_list.size
topic_work_list.each {|a, b| puts a.class; puts b.class; puts "end" }
topic_work_list.first
topic_work_list
next
c
vector_def
c
vector_def
c
vector
vector_def
c
vector_def2
DB.query_single(
        "SELECT * from #{DiscourseAi::Embeddings::Schema::TOPICS_TABLE}")
DB.query_single(
        "SELECT topic_id from #{DiscourseAi::Embeddings::Schema::TOPICS_TABLE}")
topic_ids
n
c
topic_work_list.first
topic_work_list
n
c
production_vector
backfill_vector
n
